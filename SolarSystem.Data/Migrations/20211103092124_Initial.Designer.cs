// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarSystem.Data;

namespace SolarSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211103092124_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "D8E9592C-A965-4F5D-BD48-99F35902FD24",
                            ConcurrencyStamp = "eea82b05-2268-4336-84fc-e2ad8e409e61",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cc3695c4-a351-43f6-a70f-81bfe584d262",
                            ConcurrencyStamp = "a70a0a99-4b8b-4382-b0f7-cb07cbcba04b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Body", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("Component Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At");

                    b.Property<double>("DistanceToTheSun")
                        .HasColumnType("float")
                        .HasColumnName("Distance To The Sun (AU)");

                    b.Property<double>("EarthMass")
                        .HasColumnType("float")
                        .HasColumnName("Earth Mass (AU)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region Id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated At");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("RegionId");

                    b.ToTable("Bodies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentId = 1,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(1253),
                            DistanceToTheSun = 0.0,
                            EarthMass = 332900.0,
                            Name = "Sun",
                            RegionId = 1,
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(1599)
                        },
                        new
                        {
                            Id = 2,
                            ComponentId = 2,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(2020),
                            DistanceToTheSun = 1.0,
                            EarthMass = 1321.0,
                            Name = "Earth",
                            RegionId = 1,
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(2028)
                        },
                        new
                        {
                            Id = 3,
                            ComponentId = 3,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(2030),
                            DistanceToTheSun = 5.2000000000000002,
                            EarthMass = 332900.0,
                            Name = "Jupiter",
                            RegionId = 2,
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 484, DateTimeKind.Local).AddTicks(2032)
                        });
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated At");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9247),
                            Name = "Star",
                            Type = "G2 main-sequence star",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9623)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9937),
                            Name = "Rocky Planet",
                            Type = "Rocky Planet",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9943)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9944),
                            Name = "Gas Planet",
                            Type = "Gas Planet",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 478, DateTimeKind.Local).AddTicks(9945)
                        });
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created At");

                    b.Property<double>("DistanceToTheSun")
                        .HasColumnType("float")
                        .HasColumnName("Distance To The Sun (AU)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated At");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 475, DateTimeKind.Local).AddTicks(6085),
                            DistanceToTheSun = 5.0,
                            Name = "Inner Solar System",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 476, DateTimeKind.Local).AddTicks(5444)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 476, DateTimeKind.Local).AddTicks(5932),
                            DistanceToTheSun = 30.100000000000001,
                            Name = "Outer Solar System",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 476, DateTimeKind.Local).AddTicks(5938)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 476, DateTimeKind.Local).AddTicks(5941),
                            DistanceToTheSun = 68.0,
                            Name = "Trans-Neptunian",
                            UpdatedAt = new DateTime(2021, 11, 3, 16, 21, 23, 476, DateTimeKind.Local).AddTicks(5942)
                        });
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2")
                        .HasColumnName("Day of Birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("First Name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone Number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SolarSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SolarSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SolarSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Body", b =>
                {
                    b.HasOne("SolarSystem.Data.Entities.Component", "Component")
                        .WithMany("Bodies")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolarSystem.Data.Entities.Region", "Region")
                        .WithMany("Bodies")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Component", b =>
                {
                    b.Navigation("Bodies");
                });

            modelBuilder.Entity("SolarSystem.Data.Entities.Region", b =>
                {
                    b.Navigation("Bodies");
                });
#pragma warning restore 612, 618
        }
    }
}
